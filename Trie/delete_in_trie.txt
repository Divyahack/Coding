

#include <bits/stdc++.h> 
using namespace std; 

const int ALPHABET_SIZE = 26; 
struct TrieNode 
{ 
	struct TrieNode* children[ALPHABET_SIZE]; 
	bool isEndOfWord; 
}; 

struct TrieNode* getNode(void) 
{ 
	struct TrieNode* newNode = new TrieNode; 

	newNode->isEndOfWord = false; 

	for (int i = 0; i < ALPHABET_SIZE; i++) 
		newNode->children[i] = NULL; 

	return newNode; 
} 

void insert(struct TrieNode *root, string key) 
{ 
	struct TrieNode *curr = root; 

	for (int i = 0; i < key.length(); i++) 
	{ 
		int index = key[i] - 'a'; 
		if (!curr->children[index])  // if not exist node  
			curr->children[index] = getNode(); 

		curr = curr->children[index]; 
	} 	
       curr->isEndOfWord = true; 
} 
 
bool search(struct TrieNode *root, string key) 
{ 
	struct TrieNode *curr = root; 

	for (int i = 0; i < key.length(); i++) 
	{ 
		int index = key[i] - 'a'; 
		if (!curr->children[index]) 
			return false; 

		curr = curr->children[index]; 
	} 

	if(curr!= NULL && curr->isEndOfWord==true)
	return true;
	else
	return false;
} 
bool isEmpty(TrieNode* root) 
{ 
	for (int i = 0; i < ALPHABET_SIZE; i++) // if root has no children
		if (root->children[i]) 
			return false; 
	return true; 
} 
TrieNode* remove(TrieNode* root, string key, int depth = 0) 
{ 
    if (!root) 
		return NULL; 
    if (depth == key.size())   // last ele
    { 
 
		if (root->isEndOfWord) 
			root->isEndOfWord = false; 

		if (isEmpty(root)) // if root has no children
		{ 
			delete (root); 
			root = NULL; 
		} 

		return root; 
    } 
   int index = key[depth] - 'a'; 
	root->children[index] = remove(root->children[index], key, depth + 1); 
   if (isEmpty(root) && root->isEndOfWord == false)
   { 
		delete (root); 
		root = NULL; 
	} 

	return root; 
} 
int main() 
{ 
	string keys[] = { "the", "a", "there", 
					"answer", "any", "by", 
					"bye", "their", "hero", "heroplane" }; 
	int n = sizeof(keys) / sizeof(keys[0]); 

	struct TrieNode* root = getNode(); 
	for (int i = 0; i < n; i++) 
		insert(root, keys[i]); 
	cout<<search(root , "heroplane");
	
	remove(root, "heroplane");
	cout<<search(root , "heroplane");
	return 0; 
} 

