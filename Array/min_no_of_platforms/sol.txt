
//brute force approch
int findPlatform(int arr[], int dep[], int n) 
{  
	int plat_needed = 1, result = 1; 
	for (int i = 0; i < n; i++)
	{ 
		plat_needed = 1; 

		for (int j = i + 1; j < n; j++) 
		{ 
			if ((arr[i] >= arr[j] && arr[i] <= dep[j]) || 	(arr[j] >= arr[i] && arr[j] <= dep[i])) 
				plat_needed++; 
		} 
		result = max(result, plat_needed); 
	} 

	return result; 
} 

/*
If all the arrival and departure occur on the same day then we can use and auxiliary array to compute the required number of the platform in O(n).

Whenever an arrival occurs we increase the count of the required platform when a departure occurs we decrease the required platform at that point of time, after that,
 we take the cumulative sum, which would provide the required number of platform for all point of time, out of these values maximum value is our answer.
*/
int minPlatform(int arrival[], int departure[], int n) 
{ 
    // as time range from 0 to 2359 in 24 hour clock, 
	// we declare an array for values from 0 to 2360 
	int platform[2361]={0} ; 
	for (int i = 0; i < n; i++) 
	{ 
	   platform[arrival[i]]++; 
		platform[departure[i] + 1]--; 
	} 
	for (int i = 1; i < 2361; i++) // cumulative sum
	{ 
		platform[i] = platform[i] + platform[i - 1]; 
	} 
    return *max_element(platform , platform + 2361);
} 

