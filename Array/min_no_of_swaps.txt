Minimum number of swaps required to sort an array of first N number

Given an array arr[] of distinct integers from 1 to N.
 The task is to find the minimum number of swaps required to sort the array.
Example:

Input: arr[] = { 7, 1, 3, 2, 4, 5, 6 }
Output: 5
Explanation:
i           arr             swap (indices)
0   [7, 1, 3, 2, 4, 5, 6]   swap (0, 3)
1   [2, 1, 3, 7, 4, 5, 6]   swap (0, 1)
2   [1, 2, 3, 7, 4, 5, 6]   swap (3, 4)
3   [1, 2, 3, 4, 7, 5, 6]   swap (4, 5)
4   [1, 2, 3, 4, 5, 7, 6]   swap (5, 6)
5   [1, 2, 3, 4, 5, 6, 7]
Therefore, total number of swaps = 5

Input: arr[] = { 2, 3, 4, 1, 5 }
Output: 3




int minimumSwaps(int arr[],int n) 
{ 
	int count = 0; 
	for(int i = 0;i<n;i++)
	{	
	    if (arr[i] != i + 1) 
		{ 

			while (arr[i] != i + 1)    // swap with curr ele with its actual pos
			{ 
				int temp = 0; 
         		temp = arr[arr[i] - 1]; 
				arr[arr[i] - 1] = arr[i]; 
				arr[i] = temp; 
				count++; 
			} 
		}  
	} 
	return count; 
} 

