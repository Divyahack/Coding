/*
Connect n ropes with minimum cost

There are given n ropes of different lengths, we need to connect these ropes into one rope. The cost to connect two ropes is equal to the sum of their lengths. We need to connect the ropes with minimum cost.

For example, if we are given 4 ropes of lengths 4, 3, 2, and 6. We can connect the ropes in the following ways.
1) First, connect ropes of lengths 2 and 3. Now we have three ropes of lengths 4, 6, and 5.
2) Now connect ropes of lengths 4 and 5. Now we have two ropes of lengths 6 and 9.
3) Finally connect the two ropes and all ropes have connected.
*/

int minCost(int arr[], int n) 
{ 
	priority_queue<int, vector<int>, greater<int> > min_heap; 
    int total_cost=0;
    int sum;
    for(int i=0;i<n;i++)
       min_heap.push(arr[i]);
    
    while (min_heap.size() >=2)
    { 
		int first = min_heap.top(); 
		min_heap.pop(); 
		int second = min_heap.top(); 
		min_heap.pop();
		
		sum=first+second;
		total_cost=total_cost+sum;
		min_heap.push(sum); 
	} 

	return total_cost; 
} 
