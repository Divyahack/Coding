/*
 K Closest Points to Origin

We have a list of points on the plane.  Find the K closest points to the origin (0, 0).

(Here, the distance between two points on a plane is the Euclidean distance.)

You may return the answer in any order.  The answer is guaranteed to be unique (except for the order that it is in.)

 

Example 1:

Input: points = [[1,3],[-2,2]], K = 1
Output: [[-2,2]]
Explanation: 
The distance between (1, 3) and the origin is sqrt(10).
The distance between (-2, 2) and the origin is sqrt(8).
Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.
We only want the closest K = 1 points from the origin, so the answer is just [[-2,2]].
*/

class Solution {

public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int K)
    {
  
      priority_queue<pair<int,vector<int>>>max_heap;
        for(int i=0;i<points.size();i++)
        {
            int distance=points[i][0]*points[i][0]+points[i][1]*points[i][1];
            max_heap.push({distance,{points[i][0],points[i][1]}});
            if(max_heap.size()>K)
                max_heap.pop();
        }
        vector<vector<int>>res;
        while(!max_heap.empty())
        {
            res.push_back(max_heap.top().second);
            max_heap.pop();
        }
        return res;
    }
};


