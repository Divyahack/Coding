/*
Sort a nearly sorted (or K sorted) array
Given an array of n elements, where each element is at most k away from its target position, devise an algorithm that sorts in O(n log k) time. For example, let us consider k is 2, an element at index 7 in the sorted array, can be at indexes 5, 6, 7, 8, 9 in the given array.

Examples:

Input : arr[] = {6, 5, 3, 2, 8, 10, 9}
            k = 3 
Output : arr[] = {2, 3, 5, 6, 8, 9, 10}

Input : arr[] = {10, 9, 8, 7, 4, 70, 60, 50}
         k = 4
Output : arr[] = {4, 7, 8, 9, 10, 50, 60, 70}
*/

int sortK(int arr[], int n, int k) 
{ 
	priority_queue<int, vector<int>, greater<int> > min_heap; 

   for(int i=0;i<k;i++)          // make heap of 1st k eles
        min_heap.push(arr[i]);
	
	int index = 0; 
	for (int i = k ; i < n; i++)
	{ 
		arr[index++] = min_heap.top(); 
		min_heap.pop(); 
		min_heap.push(arr[i]); 
	} 

	while (!min_heap.empty())
	{ 
		arr[index++] = min_heap.top(); 
		min_heap.pop(); 
	} 
} 




