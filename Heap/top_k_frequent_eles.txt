/* Top K Frequent Elements
Given a non-empty array of integers, return the k most frequent elements.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
*/

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
  vector<int> ans;
        unordered_map<int, int> map;
        priority_queue <pair<int, int> ,vector<pair<int, int>>, greater<pair<int, int>>> min_heap; // freq , num
        for (auto i: nums)
        {
            map[i]++;
        }
        for (auto x=map.begin(); x!=map.end(); x++)
        {
            min_heap.push(make_pair(x->second, x->first));
            if (min_heap.size()>k)
                min_heap.pop();
        }
        
        while(!min_heap.empty())
        {
             ans.push_back(min_heap.top().second);
            min_heap.pop();
        }
        
        return ans;    
        
    }
};



