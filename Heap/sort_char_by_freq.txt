/* Sort Characters By Frequency

Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
*/

class Solution {
public:
    string frequencySort(string s) {

  string res="";
        unordered_map<char, int> map;
        priority_queue <pair<int, char>> max_heap; // freq , char
        for (auto i: s)
        {
            map[i]++;
        }
        for (auto x=map.begin(); x!=map.end(); x++)
        {
            max_heap.push(make_pair(x->second, x->first));   
        }
        
        while(!max_heap.empty())
        {
               res=res+ string(max_heap.top().first , max_heap.top().second);
            max_heap.pop();
        }
        
        return res;    
        
    }
}; 


