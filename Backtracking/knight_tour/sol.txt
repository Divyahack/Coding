



#include <stdio.h> 
#include<iostream>
#include <bits/stdc++.h> 
using namespace std; 

#define N 8 
int isSafe(int x, int y, int sol[N][N]) 
{ 
	return (x >= 0 && x < N && y >= 0 && y < N && sol[x][y] == -1); 
} 
int solveKT(int x, int y, int count, int sol[N][N]) 
{ 
	int  next_x, next_y; 
	if (count == N*N) 
		return 1; 
	// case1
		next_x = x - 2; 
		next_y = y + 1; 
		if (isSafe(next_x, next_y, sol)==true) 
		{ 
			sol[next_x][next_y] = count; 
			if (solveKT(next_x, next_y, count + 1, sol) == 1) 
				return 1; 
			else
				// backtracking 
				sol[next_x][next_y] = -1; 
		}
		
		// case2
		next_x = x - 1; 
		next_y = y + 2; 
		if (isSafe(next_x, next_y, sol)==true) 
		{ 
			sol[next_x][next_y] = count; 
			if (solveKT(next_x, next_y, count + 1, sol) == 1) 
				return 1; 
			else
				// backtracking 
				sol[next_x][next_y] = -1; 
		}
		
		// case3
		next_x = x + 1; 
		next_y = y + 2; 
		if (isSafe(next_x, next_y, sol)==true) 
		{ 
			sol[next_x][next_y] = count; 
			if (solveKT(next_x, next_y, count + 1, sol) == 1) 
				return 1; 
			else
				// backtracking 
				sol[next_x][next_y] = -1; 
		}
		
		// case4
		next_x = x + 2; 
		next_y = y + 1; 
		if (isSafe(next_x, next_y, sol)==true) 
		{ 
			sol[next_x][next_y] = count; 
			if (solveKT(next_x, next_y, count + 1, sol) == 1) 
				return 1; 
			else
				// backtracking 
				sol[next_x][next_y] = -1; 
		}
		
		// case5
		next_x = x + 2; 
		next_y = y - 1; 
		if (isSafe(next_x, next_y, sol)==true) 
		{ 
			sol[next_x][next_y] = count; 
			if (solveKT(next_x, next_y, count + 1, sol) == 1) 
				return 1; 
			else
				// backtracking 
				sol[next_x][next_y] = -1; 
		}
		
		// case6
		next_x = x + 1; 
		next_y = y - 2; 
		if (isSafe(next_x, next_y, sol)==true) 
		{ 
			sol[next_x][next_y] = count; 
			if (solveKT(next_x, next_y, count + 1, sol) == 1) 
				return 1; 
			else
				// backtracking 
				sol[next_x][next_y] = -1; 
		}
		
		
		// case7
		next_x = x - 1; 
		next_y = y - 2; 
		if (isSafe(next_x, next_y, sol)==true) 
		{ 
			sol[next_x][next_y] = count; 
			if (solveKT(next_x, next_y, count + 1, sol) == 1) 
				return 1; 
			else
				// backtracking 
				sol[next_x][next_y] = -1; 
		}
		
		// case8
		next_x = x - 2; 
		next_y = y - 1; 
		if (isSafe(next_x, next_y, sol)==true) 
		{ 
			sol[next_x][next_y] = count; 
			if (solveKT(next_x, next_y, count + 1, sol) == 1) 
				return 1; 
			else
				// backtracking 
				sol[next_x][next_y] = -1; 
		}
		
	 
	return 0; 
} 
int main() 
{ 
	int sol[N][N]; 
	for (int x = 0; x < N; x++) 
		for (int y = 0; y < N; y++) 
			sol[x][y] = -1; 
	sol[0][0] = 0; 
	if (solveKT(0, 0, 1, sol) == 0) 
		cout << "Solution does not exist"; 
	
		for (int x = 0; x < N; x++) 
	{ 
		for (int y = 0; y < N; y++) 
			cout << " " << setw(2) 
						<< sol[x][y] << " "; 
		cout << endl; 
	} 
	return 0; 
}  