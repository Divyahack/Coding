


Quick sort 
#include<stdio.h> 
void swap(int* a, int* b) 
{ 
	int t = *a; 
	*a = *b; 
	*b = t; 
} 
int partition (int arr[], int low, int high) 
{ 
	int pivot = arr[high];  
	int i = (low - 1); // Index of smaller region

	for (int j = low; j <= high- 1; j++) 
	{ 
		if (arr[j] <= pivot) 
		{ 
			i++;           // replace that j in smaller region 
			swap(&arr[i], &arr[j]); 
		} 
	} 
	swap(&arr[i + 1], &arr[high]);  // now i+1 is pivot's perfect pos
	return (i + 1); 
} 

void quickSort(int arr[], int low, int high) 
{ 
	if (low > high)
	return;

	   int pivot = partition(arr, low, high); 
	   quickSort(arr, low, pivot - 1); 
	   quickSort(arr, pivot + 1, high); 
} 

/* Function to print an array */
void printArray(int arr[], int size) 
{ 
	int i; 
	for (i=0; i < size; i++) 
		printf("%d ", arr[i]); 
	printf("\n"); 
} 

// Driver program to test above functions 
int main() 
{ 
	int arr[] = {10, 7, 8, 9, 1, 5}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	quickSort(arr, 0, n-1); 
	printf("Sorted array: "); 
	printArray(arr, n); 
	return 0; 
} 


