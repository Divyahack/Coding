
class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
 
        int r = grid.size();
        if(r == 0)
            return 0;
        int c = grid[0].size();
        
        queue<pair<pair<int,int>,int>> q;   // coordinate , no. of minutes
        
        for(int i=0; i<r; i++)
          for(int j=0; j<c; j++)
              if(grid[i][j] == 2)
                  q.push({{i,j},0});
        
        int ans = 0;   
        while(!q.empty())
        {
            int old_x = q.front().first.first;
            int old_y = q.front().first.second;
            int old_min = q.front().second;
            q.pop();
            
            ans = max(ans,old_min);
            
            //case 1    
                int x = old_x+1;
                int y = old_y;
                if(x>=0 && y>=0 && x<r && y<c && grid[x][y] == 1)
                {
                    grid[x][y] = 2;
                    q.push({{x,y},old_min+1});
                }
            
                 x = old_x;
                 y = old_y-1;
                
                if(x>=0 && y>=0 && x<r && y<c && grid[x][y] == 1)
                {
                    grid[x][y] = 2;
                    q.push({{x,y},old_min+1});
                }
            
                 x = old_x-1;
                 y = old_y;
                
                if(x>=0 && y>=0 && x<r && y<c && grid[x][y] == 1)
                {
                    grid[x][y] = 2;
                    q.push({{x,y},old_min+1});
                }
            
                 x = old_x;
                 y = old_y+1;
                
                if(x>=0 && y>=0 && x<r && y<c && grid[x][y] == 1)
                {
                    grid[x][y] = 2;
                    q.push({{x,y},old_min+1});
                }
            
            
        }
        
        for(int i=0; i<r; i++)     // if any fresh orange left
          for(int j=0; j<c; j++)
              if(grid[i][j] == 1)
                  return -1;
        
        
        return ans;
    }        
    
};

