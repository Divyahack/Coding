#include<iostream>
#include<bits/stdc++.h>
using namespace std;
struct Node
{
    int data;
    Node *left , *right;
    Node(int d)
    {
        data=d;
        left=right=NULL;
    }
};

int check_mirror(Node *root1 , Node *root2)
{
    if(root1==NULL && root2==NULL)
    return 1;
    
    if(root1==NULL || root2==NULL)
    return 0;
    
    if(root1->data==root2->data)
    {
        int x=check_mirror(root1->left, root2->right);
        if (x==1)
          {
              int y= check_mirror(root1->right, root2->left);
               return y;
          }
        
    }
    return 0;
}
int main()
{
    Node *root1 = new Node(1);
    root1->left=new Node(2);
    root1->right=new Node(3);
    root1->left->left=new Node(4);
    root1->left->right=new Node(5);
    root1->right->left=new Node(6);

Node *root2 = new Node(1);
    root2->left=new Node(3);
    root2->right=new Node(2);
    root2->right->left=new Node(5);
    root2->left->right=new Node(6);
    root2->right->right=new Node(4);

 int ans= check_mirror(root1 , root2);
    if(ans==1)
    cout<<"\n Two trees are mirror image !!";
    else
    cout<<"\n Two trees are not mirror image !!";
    return 0;
}
