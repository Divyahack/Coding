// reverse level order traversal
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
struct Node
{
    int data;
    Node *left , *right;
    Node(int d)
    {
        data=d;
        left=right=NULL;
    }
};
void reverse_level(Node *root)
{
    queue<Node*> q;
    stack<int> s;
    Node *temp;
    if(root==NULL)
      return;
      
  q.push(root);
       
    while(!q.empty())
    {
    temp=q.front();
    q.pop();
    s.push(temp->data);
    // right then left child

       if(temp->right)
          q.push(temp->right);
       if( temp->left)
         q.push(temp->left);
    }
    
    while(!s.empty())
    {
        cout<<" "<<s.top()<<" ";
        s.pop();
    }
}
int main()
{
    Node *root = new Node(1);
    root->left=new Node(2);
    root->right=new Node(3);
    root->left->left=new Node(4);
    root->left->right=new Node(5);
    
   cout<<"\n Reverse level order traversal of  Tree is  : \n";
   reverse_level(root);
    return 0;
}


