
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) 
    { 
       if (!root) 
        return{}; 
   
    map < int,vector<int> > m; 
    int hd = 0;     // horizontal_dist (from left)
   queue<pair<TreeNode*, int> > q; 
    q.push(make_pair(root, hd)); 
  
     while (!q.empty()) 
     { 
         
        pair<TreeNode *,int> temp = q.front(); 
        q.pop(); 
        hd = temp.second; 
        TreeNode* node = temp.first; 
        m[hd].push_back(node->val); 
  
        if (node->left) 
            q.push(make_pair(node->left, hd-1)); 
        if (node->right) 
            q.push(make_pair(node->right, hd+1)); 
    } 
        
         vector<vector<int>> res; 
        vector<int> curr;
 for (auto it=m.begin(); it!=m.end(); it++) 
    { 
        for (int i=0; i<it->second.size(); i++) 
        { 
            curr.push_back(it->second[i]); 
        }
        res.push_back(curr);
        curr.clear();
    }
        return res;
    }
};